* Exercise 1: Basic Reaction-Based Purchase Protocol
In this exercise, you'll implement a simple buyer-seller interaction using the Purchase protocol with reaction-based programming.

** Learning Objectives
- Set up a basic BSPL (Blindingly Simple Protocol Language) protocol
- Configure a multi-agent system with roles and addresses
- Implement reaction handlers for message processing
- Run a complete protocol enactment

** Files Provided
- =purchase.bspl=: Protocol specification
- =buyer.py=: Skeleton file for Buyer agent
- =seller.py=: Skeleton file for Seller agent
- =configuration.py=: Skeleton file for configuration
- =start.sh=: Script to start all agents

** The Purchase Protocol
#+begin_example
Purchase {
  roles B, S
  parameters out ID key, out item, out price, out done
  
  B -> S: RFQ[out ID key, out item]
  S -> B: Quote[in ID key, in item, out price]
  B -> S: Buy[in ID key, in item, in price, out done]
  B -> S: Reject[in ID key, in price, out done]
}
#+end_example

This protocol enables a basic purchasing interaction:
  1. Buyer sends an RFQ (Request for Quote) with an item
  2. Seller responds with a Quote including price
  3. Buyer can either Buy the item or Reject the offer

** Tasks
*** 1. Complete =configuration.py=
Configure agents and their addresses, and set up the Purchase protocol system.

*** 2. Complete =buyer.py=
1. Implement the RFQ initiation functionality to generate IDs and send RFQs
2. Implement a reaction handler for Quote messages
3. Implement logic to decide whether to Buy or Reject based on the quoted price

*** 3. Complete =seller.py=
1. Implement a reaction handler for RFQ messages
2. Implement logic to generate quotes with appropriate prices
3. Implement reaction handlers for Buy and Reject messages

*** 4. Run the Agents
Use the provided start script to run both agents and observe their interaction.

Check the =solution/= directory for examples if you get stuck, or to compare your final result.

*** 5. Testing Your Solution
Test scripts are provided to automatically test your implementation:

#+begin_example
# Run the Python test script
./test.py

# Or run the Bash test script (if available)
./test.sh
#+end_example

These scripts will:
- Run your implementation
- Collect logs in the =logs/= directory
- Verify that key protocol steps are being executed correctly
- Report on successful and failed test cases

You can also test the solution implementation directly:

#+begin_example
# Test the solution implementation
./solution/test.py
#+end_example

Test with specific components:

#+begin_example
# Test your buyer.py with the solution seller
./test.py solution/seller.py

# Test your seller.py with the solution buyer
./test.py solution/buyer.py
#+end_example