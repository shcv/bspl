MultiFlatLoanNegotiation {
  roles Borrower, Lender
  parameters out eID key, out product, out quantity, opt contract, opt Borrower_canceled, opt Lender_canceled, out final
  private rID key, fee, Borrower_accept, Lender_accept, Borrower_reject, Lender_reject

  Borrower -> Lender: Request[out eID key, out product, out quantity]
  Borrower -> Lender: Propose[out eID key, out rID key, out product, out quantity, out fee, out Borrower_accept]

  Lender -> Borrower: Offer[in eID key, out rID key, in product, in quantity, out fee, out Lender_accept]
  Borrower -> Lender: Ask[in eID key, out rID key, in product, in quantity, out fee, out Borrower_accept]

  Borrower -> Lender: B_Accept[in eID key, in rID key, in product, in quantity, in fee, in Lender_accept, out contract, nil Borrower_reject]
  Lender -> Borrower: L_Accept[in eID key, in rID key, in product, in quantity, in fee, in Borrower_accept, out contract, nil Lender_reject]

  Borrower -> Lender: B_Reject[in eID key, in rID key, in product, in quantity, in fee, out Borrower_reject, nil contract]
  Lender -> Borrower: L_Reject[in eID key, in rID key, in product, in quantity, in fee, out Lender_reject, nil contract]

  Borrower -> Lender: B_Cancel[in eID key, out Borrower_canceled]

  Lender -> Borrower: Finalize-contract[in eID key, in contract, out final]
  Lender -> Borrower: Finalize-borrower-cancel[in eID key, in Borrower_canceled, out final]
  Lender -> Borrower: Finalize-lender-cancel[in eID key, out Lender_canceled, out final]
}
