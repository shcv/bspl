Debit {
  roles B, S
  parameters in order key, out payment, nil filled
  private debitOffer, acceptDebit

  B → S: OfferDebit[in order, out debitOffer, nil filled]
  S → B: AcceptDebit[in order, in debitOffer, out acceptDebit]
  B → S: PayDebit[in order, in acceptDebit, out payment]
}

Credit {
  roles B, S
  parameters in order key, out payment, nil filled
  private creditOffer, acceptCredit

  B → S: OfferCredit[in order, out creditOffer, nil filled]
  S → B: AcceptCredit[in order, in creditOffer, out acceptCredit]
  B → S: PayCredit[in order, in acceptCredit, out payment]
}

RefinedPurchase {
  roles B, S // Buyer, Seller
  parameters out order key, out filled
  private payment

  B → S: PlaceOrder[out order]
  Debit(B, S, order, payment, filled)
  Credit(B, S, order, payment, filled)
  S → B: FillOrder[in order, in payment, out filled]
}