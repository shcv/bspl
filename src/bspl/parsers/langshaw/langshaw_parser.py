#!/usr/bin/env python

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.

from __future__ import annotations

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.parsing import leftrec, nomemo, isname # noqa
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class LangshawBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re='\u200c\u200c#|(//).*?$',
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super().__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class LangshawParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re='\u200c\u200c#|(//).*?$',
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        keywords=None,
        namechars='',
        tokenizercls=LangshawBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super().__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            tokenizercls=tokenizercls,
            **kwargs
        )

    @tatsumasu()
    def _document_(self):  # noqa

        def block0():

            def block1():
                self._pattern('\\s')
            self._closure(block1)
            self._block_()
            self.name_last_node('@')

            def block3():
                self._pattern('\\s')
            self._closure(block3)
        self._positive_closure(block0)
        self._check_eof()

    @tatsumasu()
    def _block_(self):  # noqa
        with self._choice():
            with self._option():
                self._who_()
                self.name_last_node('who')
            with self._option():
                self._what_()
                self.name_last_node('what')
            with self._option():
                self._action_block_()
                self.name_last_node('actions')
            with self._option():
                self._conflicts_()
                self.name_last_node('conflicts')
            with self._option():
                self._sayso_()
                self.name_last_node('sayso')
            with self._option():
                self._see_()
                self.name_last_node('see')
            self._error(
                'expecting one of: '
                "'who' 'roles' 'what' 'parameters'"
                "'action' 'do' <action_block> 'conflict'"
                "'nono' <conflicts> 'sayso' 'see'"
            )
        self._define(
            ['actions', 'conflicts', 'sayso', 'see', 'what', 'who'],
            []
        )

    @tatsumasu()
    def _who_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('who')
                with self._option():
                    self._token('roles')
                self._error(
                    'expecting one of: '
                    "'who' 'roles'"
                )
        with self._optional():
            self._token(':')
        self._S_()
        self._roles_()
        self.name_last_node('@')

    @tatsumasu()
    def _roles_(self):  # noqa

        def sep0():
            self._token(',')

        def block0():
            self._role_()
        self._gather(block0, sep0)

    @tatsumasu()
    def _role_(self):  # noqa
        self._word_()
        self.name_last_node('@')

    @tatsumasu()
    def _what_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('what')
                with self._option():
                    self._token('parameters')
                self._error(
                    'expecting one of: '
                    "'what' 'parameters'"
                )
        with self._optional():
            self._token(':')
        self._S_()

        def sep2():
            self._token(',')

        def block2():
            self._clause_()
        self._gather(block2, sep2)
        self.name_last_node('@')

    @tatsumasu()
    def _clause_(self):  # noqa

        def sep0():
            self._token('or')

        def block0():
            self._param_()
        self._gather(block0, sep0)

    @tatsumasu()
    def _param_(self):  # noqa
        self._word_()
        self.name_last_node('name')
        with self._optional():
            self._token('key')
            self.name_last_node('key')
        self._define(
            ['key', 'name'],
            []
        )

    @tatsumasu()
    def _action_block_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('action')
                    with self._optional():
                        self._token('s')
                with self._option():
                    self._token('do')
                self._error(
                    'expecting one of: '
                    "'action' 'do'"
                )
        with self._optional():
            self._token(':')
        self._S_()

        def block2():
            self._action_()
        self._positive_closure(block2)
        self.name_last_node('@')

    @tatsumasu()
    def _action_(self):  # noqa

        def block0():
            self._token(' ')
        self._positive_closure(block0)
        self._word_()
        self.name_last_node('actor')
        self._token(':')

        def block2():
            self._token(' ')
        self._closure(block2)
        self._cut()
        self._word_()
        self.name_last_node('name')
        self._token('(')
        self._params_()
        self.name_last_node('parameters')
        self._token(')')
        self._S_()
        self._define(
            ['actor', 'name', 'parameters'],
            []
        )

    @tatsumasu()
    def _params_(self):  # noqa

        def sep0():
            self._token(',')

        def block0():
            self._word_()
        self._gather(block0, sep0)

    @tatsumasu()
    def _conflicts_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('conflict')
                with self._option():
                    self._token('nono')
                self._error(
                    'expecting one of: '
                    "'conflict' 'nono'"
                )
        with self._optional():
            self._token(':')
        self._S_()

        def block2():
            self._conflict_()
        self._positive_closure(block2)
        self.name_last_node('@')

    @tatsumasu()
    def _conflict_(self):  # noqa

        def block0():
            self._token(' ')
        self._positive_closure(block0)

        def block2():
            self._word_()
        self._positive_closure(block2)
        self.name_last_node('@')
        self._S_()

    @tatsumasu()
    def _sayso_(self):  # noqa
        self._token('sayso')
        with self._optional():
            self._token(':')
        self._S_()

        def block1():
            self._sayso_expression_()
        self._positive_closure(block1)
        self.name_last_node('@')

    @tatsumasu()
    def _sayso_expression_(self):  # noqa

        def block0():
            self._token(' ')
        self._positive_closure(block0)
        self._priority_()
        self.name_last_node('roles')
        self._token(':')
        self._params_()
        self.name_last_node('parameters')
        self._S_()
        self._define(
            ['parameters', 'roles'],
            []
        )

    @tatsumasu()
    def _priority_(self):  # noqa

        def sep0():
            self._token('>')

        def block0():
            self._role_()
        self._gather(block0, sep0)

    @tatsumasu()
    def _see_(self):  # noqa
        self._token('see')
        with self._optional():
            self._token(':')
        self._S_()

        def block1():
            self._thing_()
        self._positive_closure(block1)
        self.name_last_node('@')

    @tatsumasu()
    def _thing_(self):  # noqa

        def block0():
            self._token(' ')
        self._positive_closure(block0)
        self._roles_()
        self.name_last_node('roles')
        self._token(':')
        self._params_()
        self.name_last_node('parameters')
        self._S_()
        self._define(
            ['parameters', 'roles'],
            []
        )

    @tatsumasu()
    def _word_(self):  # noqa

        def block0():
            self._token(' ')
        self._closure(block0)
        self._pattern('[\\w@-]+')
        self.name_last_node('@')

        def block2():
            self._token(' ')
        self._closure(block2)

    @tatsumasu()
    def _spacename_(self):  # noqa
        self._pattern('[ \\w@-]+')

    @tatsumasu()
    def _S_(self):  # noqa
        with self._optional():

            def block0():
                self._token(' ')
            self._closure(block0)
            self._token('\n')


class LangshawSemantics(object):
    def document(self, ast):  # noqa
        return ast

    def block(self, ast):  # noqa
        return ast

    def who(self, ast):  # noqa
        return ast

    def roles(self, ast):  # noqa
        return ast

    def role(self, ast):  # noqa
        return ast

    def what(self, ast):  # noqa
        return ast

    def clause(self, ast):  # noqa
        return ast

    def param(self, ast):  # noqa
        return ast

    def action_block(self, ast):  # noqa
        return ast

    def action(self, ast):  # noqa
        return ast

    def params(self, ast):  # noqa
        return ast

    def conflicts(self, ast):  # noqa
        return ast

    def conflict(self, ast):  # noqa
        return ast

    def sayso(self, ast):  # noqa
        return ast

    def sayso_expression(self, ast):  # noqa
        return ast

    def priority(self, ast):  # noqa
        return ast

    def see(self, ast):  # noqa
        return ast

    def thing(self, ast):  # noqa
        return ast

    def word(self, ast):  # noqa
        return ast

    def spacename(self, ast):  # noqa
        return ast

    def S(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'document'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = LangshawParser()
    return parser.parse(
        text,
        rule_name=start,
        filename=filename,
        **kwargs
    )


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, LangshawParser, name='Langshaw')
    data = asjson(ast)
    print(json.dumps(data, indent=2))
